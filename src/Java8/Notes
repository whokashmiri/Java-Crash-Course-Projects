==What is the Purpose Of Java
1. To Write minimal and Concise Code
2. To Introduce benefits Functional Programming
3. To enable parallel Programming - To Write More Compatible Code for multi core processors-

==Java 8 Features
1. Lambda Expressions (Anonymous Functions)
2. Stream API
3. Data and TIME API
4. Base64 Encode and Decode
5. Method Reference and Constructor Reference
6. Introduction of Default methods In In Interface in Addition to Public Abstract methods
7. Functional Interfaces (An interface that contains only one abstract method, it can have any number of default
and static Methods, Few Functional Interfaces already present before java8 Runnable Callable and Comparator.
== What is Java?
High Level OOP language

==Platform Independent
because the compiler compiles the code and then converts it to platform-independent byte code which can be run
on multiple systems. to run that byte-code the machine should have JRE installed

== Heap Vs Stack
Stack Memory
Purpose: Used for static memory allocation and execution of a thread.
Storage: Stores primitive data types (int, char, etc.), method calls, and references to objects in the heap.
Lifespan: Memory is automatically managed with the Last-In-First-Out (LIFO) principle.
Heap Memory
Purpose: Used for dynamic memory allocation for objects and class instances.
Storage: Stores all objects and arrays created with the new keyword.
Lifespan: Objects in the heap are managed by the Garbage Collector, which automatically frees memory that is no
longer in use.
Java Utilizes this memory as -
When we write a java program then all the variables, methods, etc are stored in the stack memory.
And when we create any object in the java program then that object was created in the heap memory.
And it was referenced from the stack memory.

== instance variable and a local variable?
Those variable which are accessed by all the methods in the class
Those Variable which are present within a block

== Data encapsulation?
Data Encapsulation is an Object-Oriented Programming concept of hiding the data attributes and
their behaviours in a single unit.
It helps developers to follow modularity while developing software by ensuring that each object
is independent of other objects by having its own methods, attributes, and functionalities.
It is used for the security of the private properties of an object and hence serves the purpose
of data hiding.


==JIT compiler
When a Java program is executed, the JVM interprets the bytecode.
The JIT compiler identifies frequently executed code (hot spots) and compiles them into native machine code.
This compiled code is then executed directly by the CPU, which is much faster than interpreting bytecode
++Benefits
1. Performance 2. Optimization
Java Source => Compiler => Byte Code => JIT Compiler => Native Code

==Can you tell the difference between equals() method and equality operator (==) in Java?
.equals() Used to compare the contents of two objects to determine if they are logically equal.
(==) Used to compare the references of two objects to determine if they point to the same memory location.

==Constructor
A constructor in Java is a special method that is used to initialize objects. The constructor is called when an
object of a class is created. At the time of calling the constructor, memory for the object is allocated in the memory.
class Hello{ (this is the Class)
Hello(){ (this is instance of the class called as Constructor )
}

}


==Constructor Overloading
Constructor overloading in Java is a technique that allows a class to have more than one constructor, each with
a different parameter list.

// Regular constructor public
Person(String name, int age)
{ this.name = name; this.age = age; }
// Copy constructor
public Person(Person other)
{ this.name = other.name;
this.age = other.age; }


==method overloading and overriding
method overloading is made possible by introducing different methods in the same class consisting of the same name.
Still, all the functions differ in the number or type of parameters.
class OverloadingHelp {
   public int findarea (int l, int b) {
           int var1;
           var1 = l * b;
           return var1;
   }
   public int findarea (int l, int b, int h) {
           int var2;
           var2 = l * b * h;
           return var2;
   }
}

Method overriding allows a subclass to provide a specific implementation of a method that is already
defined in its superclass.

class Animal {
    void sound() {
        System.out.println("Animal makes a sound");
    }
}

class Dog extends Animal {
    @Override
    void sound() {
        System.out.println("Dog barks");
    }
}

public class Main {
    public static void main(String[] args) {
        Animal myAnimal = new Animal();
        Animal myDog = new Dog();

        myAnimal.sound(); // Output: Animal makes a sound
        myDog.sound();    // Output: Dog barks
    }
}


==Final Finally and (Finalize-> it is Used for cleanup it is deprecated then removed);
Final: If any restriction is required for classes, variables, or methods, the final keyword comes in handy.
Inheritance of a final class and overriding of a final method is restricted by the use of the final keyword.
The variable value becomes fixed after incorporating the final keyword. Example:
final int a=100;
a = 0;  // error
Finally: It is the block present in a program where all the codes written inside it get executed irrespective of
handling of exceptions.
try {
int variable = 5;
}
catch (Exception exception) {
System.out.println("Exception occurred");
}
finally {
System.out.println("Execution of finally block");
}


==finallyâ€™ block will not be executed
Suppose we use System.exit() in the above statement.
If there are fatal errors like Stack overflow, Memory access error, etc.

== When can you use super keyword?
Accessing Superclass Methods: You can use super to call a method from the superclass that has been overridden
in the subclass.
class Animal {
    void sound() {
        System.out.println("Animal makes a sound");
    }
}

class Dog extends Animal {
    @Override
    void sound() {
        super.sound(); // Calls the sound method from Animal class
        System.out.println("Dog barks");
    }
}

public class Main {
    public static void main(String[] args) {
        Dog dog = new Dog();
        dog.sound(); // Output: Animal makes a sound
                    //         Dog barks
    }
}

Accessing Superclass Constructors: You can use super to call a constructor from the superclass. This must be the
first statement in the subclass constructor.
class Animal {
    Animal(String name) {
        System.out.println("Animal constructor called: " + name);
    }
}

class Dog extends Animal {
    Dog(String name) {
        super(name); // Calls the constructor of Animal class
        System.out.println("Dog constructor called: " + name);
    }
}

public class Main {
    public static void main(String[] args) {
        Dog dog = new Dog("Buddy"); // Output: Animal constructor called: Buddy
                                    //         Dog constructor called: Buddy
    }
}

Accessing Superclass Fields: You can use super to access a field from the superclass when there is a field with the
same name in the subclass.
class Animal {
    String color = "white";
}

class Dog extends Animal {
    String color = "black";

    void printColor() {
        System.out.println("Dog color: " + color); // Output: Dog color: black
        System.out.println("Animal color: " + super.color); // Output: Animal color: white
    }
}

public class Main {
    public static void main(String[] args) {
        Dog dog = new Dog();
        dog.printColor();
    }
}

==Why is the main method static in Java?
1. Entry Point: serves as the entry point->When the Java Virtual Machine (JVM) starts, it needs a way to execute the
program without creating an instance of the class. By making the main method static, the JVM can call it
directly using the class name.
2. No Object Required: Since the main method is static, it can be called without creating an object of the class.
This is crucial because, at the start of the program, there are no objects created yet.
