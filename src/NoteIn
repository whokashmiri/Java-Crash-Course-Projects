==what are the reasons behind making strings immutable in Java
In short, immutability makes strings safe to share, thread-safe, and reliable when used in collections
String Pool
Optimization: Java designers knew strings would be heavily used, so they created a "String pool" to store string
literals.
Sharing: Immutable strings can be shared safely. Mutable strings can't be shared because they can change, causing
issues.
Collections
HashMaps and HashTables: Strings are often used as keys. If strings were mutable, they could change after being added
to a collection, causing problems with data retrieval. Immutable strings prevent this issue.

==differentiate between a String, StringBuffer, and a StringBuilder?
Storage area: In string, the String pool serves as the storage area. For StringBuilder and StringBuffer, heap memory
is the storage area.
Mutability: A String is immutable, whereas both the StringBuilder and StringBuffer are mutable.
Efficiency: It is quite slow to work with a String. However, StringBuilder is the fastest in performing operations.
The speed of a StringBuffer is more than a String and less than a StringBuilder.


==HashSet
A HashSet in Java is a collection class that implements the Set interface, which means it stores a collection of
unique elements. It does not allow duplicate elements. Internally, a HashSet uses a HashMap to store its elements.
Each element in the HashSet is stored as a key in the HashMap,
A list can contain duplicate elements whereas Set contains unique elements only.

==ArrayList
Java ArrayList is a part of collections framework and it is a class of java.util package. It provides us with
dynamic arrays in Java. Though, it may be slower than standard arrays but can be helpful in programs where lots
of manipulation in array is required. The main advantage of ArrayList is, unlike normal arrays, we donâ€™t need to
mention the size when creating ArrayList. It automatically adjusts its capacity as elements are added or removed.

==What are Interfaces in Java?
The interface in Java is a mechanism to achieve abstraction. Traditionally, an interface could only have abstract
methods (methods without a body) and public, static, and final variables by default. It is used to achieve
abstraction and multiple inheritances in Java. In other words, interfaces primarily define methods that other
classes must implement.
Purpose:
Interfaces are used to achieve abstraction and multiple inheritance in Java.
They allow different classes to implement the same set of methods, ensuring a consistent interface.

==What is Abstract Class in Java
An abstract class in Java is like a blueprint for other classes. It cannot be instantiated on its own, meaning you
can't create an object directly from it. Instead, it's meant to be extended by other classes.
Purpose:
Abstract classes are used to provide a common base for subclasses.
They can define methods that must be implemented by subclasses, ensuring a consistent interface.

==Features of OOP
1. Inheritance
A class that is able to use the properties of parent class(extends is used to inherit the properties of parent
  class)

  Key Differences
  Inheritance: Abstract classes support single inheritance, while interfaces support multiple inheritance.

  Methods: Abstract classes can have both abstract and concrete methods, while interfaces (before Java 8) can have only abstract methods. From Java 8 onwards, interfaces can also have default methods.

  Fields: Abstract classes can have instance variables, while interfaces can have only static and final variables.

  Constructors: Abstract classes can have constructors, while interfaces cannot.


  1. Compile-Time Polymorphism (Method Overloading)
  Compile-time polymorphism, also known as method overloading, occurs when multiple methods in the same class
  have the same name but different parameters (different type, number, or both). The method to be called is
  determined at compile time.

  Run-Time Polymorphism (Method Overriding)
  Run-time polymorphism, also known as method overriding, occurs when a subclass provides a specific
  implementation of a method that is already defined in its superclass. The method to be called is
  determined at runtime based on the object's actual type